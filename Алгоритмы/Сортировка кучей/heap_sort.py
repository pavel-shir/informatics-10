def sift_up(h, i):
    '''
    Просеивает вверх элемент с индексом i в куче h
    Куча h хранится в виде списка
    Не возвращает ничего
    '''
    p = (i - 1) // 2    # Индекс родителя
    # Цикл работает пока не дошли до корня и родитель больше просеиваемого элемента
    while i > 0 and h[p] > h[i]:
        h[p], h[i] = h[i], h[p]
        i = p
        p = (i - 1) // 2

def sift_down(h):
    '''
    Просеивает вниз корень в куче h
    Куча h хранится в виде списка
    Не возвращает ничего
    '''
    n = len(h)
    i = 0                           # Начинаем просеивание с корня
    while True:
        k = i                       # Индекс элемента с которым нужно меняться
        l = 2 * i + 1               # Индекс левого потомка
        r = 2 * i + 2               # Индекс правого потомка
        if l < n and h[l] < h[k]:
            k = l
        if r < n and h[r] < h[k]:
            k = r
        if k == i:                  # Если k не изменилось - значит просеивать дальше не нужно
            break
        h[k], h[i] = h[i], h[k]
        i = k

def insert(h, x):
    '''
    Добавление элемента x в кучу h
    Куча h хранится в виде списка
    Не возвращает ничего
    '''
    h.append(x)                     # Добавляем элемент в конец кучи
    sift_up(h, len(h) - 1)          # Просеиваем вверх добавленный элемент

def remove_min(h):
    '''
    Удаляет минимальный элемент из кучи h
    Куча h хранится в виде списка
    Возвращает значение удалённого элемента
    '''
    result = h[0]                   # Запоминаем значение корня (минимума кучи)
    h[0] = h[-1]                    # Меняем корень и последний элемент кучи местами
    h.pop()                         # Удаляем последний элемент кучи
    sift_down(h)                    # Просеиваем корень вниз

    return result

def heap_sort(a):
    '''
    Сортирует массив a
    Возвращает отсортированный массив
    >>> heap_sort([4, 1, 5, 3, 2])
    [1, 2, 3, 4, 5]
    >>> heap_sort([49, 21, 22, 35, 60, 49, 93, 28, 42, 90])
    [21, 22, 28, 35, 42, 49, 49, 60, 90, 93]
    >>> heap_sort([2, 2, 1, 2, 1, 2, 1, 1, 1])
    [1, 1, 1, 1, 1, 2, 2, 2, 2]
    '''
    h = []                          # Куча
    n = len(a)
    for i in range(n):              # Перекладываем массив в кучу
        insert(h, a[i])
    b = []
    for i in range(n):              # Перекладываем кучу в новый массив
        b.append(remove_min(h))
    return b

if __name__ == '__main__':
    import doctest
    doctest.testmod(verbose=True)
